// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: clients.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const addClient = `-- name: AddClient :one
INSERT INTO clients(address_client, client_name, client_city, client_state) VALUES ($1, $2, $3, $4) RETURNING client_id, address_client, client_name, client_city, client_state
`

type AddClientParams struct {
	AddressClient string
	ClientName    string
	ClientCity    string
	ClientState   string
}

func (q *Queries) AddClient(ctx context.Context, arg AddClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, addClient,
		arg.AddressClient,
		arg.ClientName,
		arg.ClientCity,
		arg.ClientState,
	)
	var i Client
	err := row.Scan(
		&i.ClientID,
		&i.AddressClient,
		&i.ClientName,
		&i.ClientCity,
		&i.ClientState,
	)
	return i, err
}

const getClientByNameAndAddress = `-- name: GetClientByNameAndAddress :one
SELECT client_id, client_name, address_client FROM clients WHERE client_name =$1 AND address_client= $2
`

type GetClientByNameAndAddressParams struct {
	ClientName    string
	AddressClient string
}

type GetClientByNameAndAddressRow struct {
	ClientID      pgtype.UUID
	ClientName    string
	AddressClient string
}

func (q *Queries) GetClientByNameAndAddress(ctx context.Context, arg GetClientByNameAndAddressParams) (GetClientByNameAndAddressRow, error) {
	row := q.db.QueryRowContext(ctx, getClientByNameAndAddress, arg.ClientName, arg.AddressClient)
	var i GetClientByNameAndAddressRow
	err := row.Scan(&i.ClientID, &i.ClientName, &i.AddressClient)
	return i, err
}

const getClientInfo = `-- name: GetClientInfo :one
SELECT client_id, address_client, client_name, client_city, client_state FROM clients WHERE client_id = $1
`

func (q *Queries) GetClientInfo(ctx context.Context, clientID pgtype.UUID) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientInfo, clientID)
	var i Client
	err := row.Scan(
		&i.ClientID,
		&i.AddressClient,
		&i.ClientName,
		&i.ClientCity,
		&i.ClientState,
	)
	return i, err
}

const getClient_id = `-- name: GetClient_id :one
 SELECT client_id FROM clients WHERE address_client = $1
`

func (q *Queries) GetClient_id(ctx context.Context, addressClient string) (pgtype.UUID, error) {
	row := q.db.QueryRowContext(ctx, getClient_id, addressClient)
	var client_id pgtype.UUID
	err := row.Scan(&client_id)
	return client_id, err
}

const getFuelQuotes = `-- name: GetFuelQuotes :many
 SELECT fuel_history_id, client_id, gallons, price_per_gallon, total_price, delivery_date, timestamp FROM fuel_history WHERE client_id = $1
`

func (q *Queries) GetFuelQuotes(ctx context.Context, clientID pgtype.UUID) ([]FuelHistory, error) {
	rows, err := q.db.QueryContext(ctx, getFuelQuotes, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FuelHistory
	for rows.Next() {
		var i FuelHistory
		if err := rows.Scan(
			&i.FuelHistoryID,
			&i.ClientID,
			&i.Gallons,
			&i.PricePerGallon,
			&i.TotalPrice,
			&i.DeliveryDate,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClients = `-- name: ListClients :many
SELECT client_id, address_client, client_name, client_city, client_state FROM clients
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ClientID,
			&i.AddressClient,
			&i.ClientName,
			&i.ClientCity,
			&i.ClientState,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
